#!/usr/bin/env node
const {execSync} = require("child_process");
const process = require("process");

function run(command) {
    try {
        console.log("Execute", command);
        return execSync(command, {encoding: 'utf-8'}).trim();
    } catch (error) {
        console.error('Error executing command:', error.message);
        console.error('Error code:', error.status);
        console.error('Error output:', error.stderr.toString());
        throw error;
    }
}

function parsePath(input) {
    if (input.includes(":")) {
        const [appName, path] = input.split(":");
        return {appName, path, type: 'remote'};
    }
    return {path: input, type: 'local'};
}

function getAppId(fromConfig, toConfig) {
    const appName = fromConfig.appName ?? toConfig.appName;
    return run(`cf app ${appName} --guid`);
}

function tryParseJson(json) {
    try {
        return JSON.parse(json);
    } catch (e) {
        throw new Error(`Cannot parse json: ${e.message}\n${json}`)
    }
}

function extractSshEndpoint(v2Info) {
    const json = tryParseJson(v2Info);
    const appSshEndpoint = json?.app_ssh_endpoint;
    if (!appSshEndpoint) {
        throw new Error(`Could not extract app_ssh_endpoint from /v2/info:\n${v2Info}`);
    }
    return appSshEndpoint;
}

async function execute() {
    const from = process.argv[2];
    const to = process.argv[3];
    const fromConfig = parsePath(from);
    const toConfig = parsePath(to);

    if (fromConfig.type === toConfig.type) {
        console.log("One config must be local and one must be remote!");
        process.exit(1);
    }

    const appId = getAppId(fromConfig, toConfig);
    const v2Info = run("cf curl /v2/info");
    const sshCode = run('cf ssh-code');

    const sshEndpoint = extractSshEndpoint(v2Info);
    const sshEndpointWithoutPort = sshEndpoint.split(":")[0];

    console.table({
        from,
        to,
        appId,
        sshEndpoint,
        sshCode
    })

    const srcDest = fromConfig.type === 'local'
        ? `${fromConfig.path} ${sshEndpointWithoutPort}:${toConfig.path}`
        : `${sshEndpointWithoutPort}:${fromConfig.path} ${toConfig.path}`
    const command = `sshpass -p "${sshCode}" scp -O -o StrictHostKeyChecking=no -o HostKeyAlgorithms=ssh-rsa,ssh-dss -o UserKnownHostsFile=~/.ssh/known_hosts -P 2222 -o "User=cf:${appId}/0" ${srcDest}`;
    console.log(run(command));
    console.log("ðŸš€Done ðŸš€");
}

void execute().catch(e => console.log("error while executing cf-scp", e));
