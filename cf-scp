#!/usr/bin/env node
const {exec} = require("child_process");
const process = require("process");

async function run(command) {
  return new Promise((resolve, reject) => {
    console.log(`Execute '${command}'`)
    exec(command, (err, stdout, stderr) => {
      if (err) {
        if (stdout) {
          console.log(stdout);
        }
        if (stderr) {
          console.error(stderr);
        }
        console.error(err);
        reject(err);
      } else {
        resolve(stdout.trim());
      }
    });
  });
}

function parsePath(input) {
  if (input.includes(":")) {
    const [appName, path] = input.split(":");
    return {appName, path, type: 'remote'};
  }
  return {path: input, type: 'local'};
}

async function getAppId(fromConfig, toConfig) {
  const appName = fromConfig.appName ?? toConfig.appName;
  return run(`cf app ${appName} --guid`);
}

function tryParseJson(json) {
  try {
    return JSON.parse(json);
  } catch(e) {
    throw new Error(`Cannot parse json: ${e.message}\n${json}`)
  }
}

function extractSshEndpoint(v2Info) {
  const json = tryParseJson(v2Info);
  const appSshEndpoint = json?.app_ssh_endpoint;
  if (!appSshEndpoint) {
    throw new Error(`Could not extract app_ssh_endpoint from /v2/info:\n${v2Info}`);
  }
  return appSshEndpoint;
}

async function execute() {
  const from = process.argv[2];
  const to = process.argv[3];
  const fromConfig = parsePath(from);
  const toConfig = parsePath(to);

  if (fromConfig.type === toConfig.type) {
    console.log("One config must be local and one must be remote!");
    process.exit(1);
  }

  const [appId, v2Info, sshCode] = await Promise.all(
      [
        getAppId(fromConfig, toConfig),
        run("cf curl /v2/info"),
        run("cf ssh-code")
      ]
  );
  const sshEndpoint = extractSshEndpoint(v2Info);
  const sshEndpointWithoutPort = sshEndpoint.split(":")[0];

  console.table({
    from,
    to,
    appId,
    sshEndpoint,
    sshCode
  })

  const srcDest = fromConfig.type === 'local'
      ? `${fromConfig.path} ${sshEndpointWithoutPort}:${toConfig.path}`
      : `${sshEndpointWithoutPort}:${fromConfig.path} ${toConfig.path}`
  const command = `sshpass -p${sshCode} scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -O -P 2222 -o User=cf:${appId}/0 ${srcDest}`;
  console.log(await run(command));
  console.log("ðŸš€Done ðŸš€");
}

void execute();
